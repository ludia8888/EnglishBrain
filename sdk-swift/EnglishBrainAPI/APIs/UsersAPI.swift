//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Get current user profile
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrentUser(apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfile?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrentUserWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get current user profile
     - GET /users/me
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - returns: RequestBuilder<UserProfile> 
     */
    open class func getCurrentUserWithRequestBuilder() -> RequestBuilder<UserProfile> {
        let localVariablePath = "/users/me"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfile>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get home dashboard summary
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getHomeSummary(apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: HomeSummary?, _ error: Error?) -> Void)) -> RequestTask {
        return getHomeSummaryWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get home dashboard summary
     - GET /users/me/home
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - returns: RequestBuilder<HomeSummary> 
     */
    open class func getHomeSummaryWithRequestBuilder() -> RequestBuilder<HomeSummary> {
        let localVariablePath = "/users/me/home"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HomeSummary>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get compact snapshot for WidgetKit timelines
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWidgetSnapshot(apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: WidgetSnapshot?, _ error: Error?) -> Void)) -> RequestTask {
        return getWidgetSnapshotWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get compact snapshot for WidgetKit timelines
     - GET /users/me/widget-snapshot
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - returns: RequestBuilder<WidgetSnapshot> 
     */
    open class func getWidgetSnapshotWithRequestBuilder() -> RequestBuilder<WidgetSnapshot> {
        let localVariablePath = "/users/me/widget-snapshot"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WidgetSnapshot>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update mutable profile fields
     
     - parameter userProfileUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCurrentUser(userProfileUpdate: UserProfileUpdate, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfile?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCurrentUserWithRequestBuilder(userProfileUpdate: userProfileUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update mutable profile fields
     - PATCH /users/me
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter userProfileUpdate: (body)  
     - returns: RequestBuilder<UserProfile> 
     */
    open class func updateCurrentUserWithRequestBuilder(userProfileUpdate: UserProfileUpdate) -> RequestBuilder<UserProfile> {
        let localVariablePath = "/users/me"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userProfileUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfile>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
