//
// OnboardingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OnboardingAPI {

    /**
     Record tutorial completion milestone
     
     - parameter tutorialCompletionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTutorialCompletion(tutorialCompletionRequest: TutorialCompletionRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: TutorialCompletionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createTutorialCompletionWithRequestBuilder(tutorialCompletionRequest: tutorialCompletionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Record tutorial completion milestone
     - POST /users/me/tutorial-completions
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter tutorialCompletionRequest: (body)  
     - returns: RequestBuilder<TutorialCompletionResponse> 
     */
    open class func createTutorialCompletionWithRequestBuilder(tutorialCompletionRequest: TutorialCompletionRequest) -> RequestBuilder<TutorialCompletionResponse> {
        let localVariablePath = "/users/me/tutorial-completions"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tutorialCompletionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TutorialCompletionResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Submit level test answers and compute recommended level
     
     - parameter levelTestSubmission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitLevelTest(levelTestSubmission: LevelTestSubmission, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LevelTestResult?, _ error: Error?) -> Void)) -> RequestTask {
        return submitLevelTestWithRequestBuilder(levelTestSubmission: levelTestSubmission).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit level test answers and compute recommended level
     - POST /level-tests
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter levelTestSubmission: (body)  
     - returns: RequestBuilder<LevelTestResult> 
     */
    open class func submitLevelTestWithRequestBuilder(levelTestSubmission: LevelTestSubmission) -> RequestBuilder<LevelTestResult> {
        let localVariablePath = "/level-tests"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: levelTestSubmission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LevelTestResult>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
