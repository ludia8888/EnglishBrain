//
// NotificationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NotificationsAPI {

    /**
     Consume a brain token to freeze the streak
     
     - parameter streakFreezeRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createStreakFreeze(streakFreezeRequest: StreakFreezeRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: StreakFreezeResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createStreakFreezeWithRequestBuilder(streakFreezeRequest: streakFreezeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Consume a brain token to freeze the streak
     - POST /streaks/freeze
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter streakFreezeRequest: (body)  
     - returns: RequestBuilder<StreakFreezeResponse> 
     */
    open class func createStreakFreezeWithRequestBuilder(streakFreezeRequest: StreakFreezeRequest) -> RequestBuilder<StreakFreezeResponse> {
        let localVariablePath = "/streaks/freeze"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: streakFreezeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StreakFreezeResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve pending notification digest for rendering
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNotificationDigest(apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationDigest?, _ error: Error?) -> Void)) -> RequestTask {
        return getNotificationDigestWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve pending notification digest for rendering
     - GET /notifications/digest
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - returns: RequestBuilder<NotificationDigest> 
     */
    open class func getNotificationDigestWithRequestBuilder() -> RequestBuilder<NotificationDigest> {
        let localVariablePath = "/notifications/digest"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationDigest>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Record notification open and resulting action
     
     - parameter notificationId: (path) Unique identifier of the notification record. 
     - parameter notificationOpenRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func openNotification(notificationId: UUID, notificationOpenRequest: NotificationOpenRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationOpenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return openNotificationWithRequestBuilder(notificationId: notificationId, notificationOpenRequest: notificationOpenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Record notification open and resulting action
     - POST /notifications/{notificationId}/open
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter notificationId: (path) Unique identifier of the notification record. 
     - parameter notificationOpenRequest: (body)  
     - returns: RequestBuilder<NotificationOpenResponse> 
     */
    open class func openNotificationWithRequestBuilder(notificationId: UUID, notificationOpenRequest: NotificationOpenRequest) -> RequestBuilder<NotificationOpenResponse> {
        var localVariablePath = "/notifications/{notificationId}/open"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationOpenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationOpenResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
