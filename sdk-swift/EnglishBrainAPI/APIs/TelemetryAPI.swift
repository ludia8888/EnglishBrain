//
// TelemetryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TelemetryAPI {

    /**
     Ingest product telemetry events
     
     - parameter telemetryBatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ingestTelemetryEvents(telemetryBatch: TelemetryBatch, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: TelemetryIngestResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return ingestTelemetryEventsWithRequestBuilder(telemetryBatch: telemetryBatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ingest product telemetry events
     - POST /telemetry/events
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter telemetryBatch: (body)  
     - returns: RequestBuilder<TelemetryIngestResponse> 
     */
    open class func ingestTelemetryEventsWithRequestBuilder(telemetryBatch: TelemetryBatch) -> RequestBuilder<TelemetryIngestResponse> {
        let localVariablePath = "/telemetry/events"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: telemetryBatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TelemetryIngestResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload offline-completed sessions and attempts
     
     - parameter offlineSyncRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func syncSessions(offlineSyncRequest: OfflineSyncRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: OfflineSyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return syncSessionsWithRequestBuilder(offlineSyncRequest: offlineSyncRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload offline-completed sessions and attempts
     - POST /sync/sessions
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter offlineSyncRequest: (body)  
     - returns: RequestBuilder<OfflineSyncResponse> 
     */
    open class func syncSessionsWithRequestBuilder(offlineSyncRequest: OfflineSyncRequest) -> RequestBuilder<OfflineSyncResponse> {
        let localVariablePath = "/sync/sessions"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: offlineSyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OfflineSyncResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
