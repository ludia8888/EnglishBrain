//
// AttemptsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AttemptsAPI {

    /**
     Log an item attempt within a session
     
     - parameter sessionId: (path) Unique identifier for the session. 
     - parameter attemptSubmission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAttempt(sessionId: UUID, attemptSubmission: AttemptSubmission, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Attempt?, _ error: Error?) -> Void)) -> RequestTask {
        return createAttemptWithRequestBuilder(sessionId: sessionId, attemptSubmission: attemptSubmission).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Log an item attempt within a session
     - POST /sessions/{sessionId}/attempts
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter sessionId: (path) Unique identifier for the session. 
     - parameter attemptSubmission: (body)  
     - returns: RequestBuilder<Attempt> 
     */
    open class func createAttemptWithRequestBuilder(sessionId: UUID, attemptSubmission: AttemptSubmission) -> RequestBuilder<Attempt> {
        var localVariablePath = "/sessions/{sessionId}/attempts"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: attemptSubmission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Attempt>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter attemptType
     */
    public enum AttemptType_listAttempts: String, CaseIterable {
        case all = "all"
        case correct = "correct"
        case incorrect = "incorrect"
    }

    /**
     Retrieve attempts for a session
     
     - parameter attemptType: (query) Filter attempts by verdict classification. (optional, default to .all)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAttempts(attemptType: AttemptType_listAttempts? = nil, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ListAttempts200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listAttemptsWithRequestBuilder(attemptType: attemptType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve attempts for a session
     - GET /sessions/{sessionId}/attempts
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter attemptType: (query) Filter attempts by verdict classification. (optional, default to .all)
     - returns: RequestBuilder<ListAttempts200Response> 
     */
    open class func listAttemptsWithRequestBuilder(attemptType: AttemptType_listAttempts? = nil) -> RequestBuilder<ListAttempts200Response> {
        let localVariablePath = "/sessions/{sessionId}/attempts"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attemptType": (wrappedValue: attemptType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListAttempts200Response>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Record a phase checkpoint outcome
     
     - parameter sessionId: (path) Unique identifier for the session. 
     - parameter checkpointSubmission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func recordCheckpoint(sessionId: UUID, checkpointSubmission: CheckpointSubmission, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Checkpoint?, _ error: Error?) -> Void)) -> RequestTask {
        return recordCheckpointWithRequestBuilder(sessionId: sessionId, checkpointSubmission: checkpointSubmission).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Record a phase checkpoint outcome
     - POST /sessions/{sessionId}/checkpoints
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter sessionId: (path) Unique identifier for the session. 
     - parameter checkpointSubmission: (body)  
     - returns: RequestBuilder<Checkpoint> 
     */
    open class func recordCheckpointWithRequestBuilder(sessionId: UUID, checkpointSubmission: CheckpointSubmission) -> RequestBuilder<Checkpoint> {
        var localVariablePath = "/sessions/{sessionId}/checkpoints"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkpointSubmission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Checkpoint>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
