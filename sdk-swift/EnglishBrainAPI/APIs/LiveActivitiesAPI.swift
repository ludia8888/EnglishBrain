//
// LiveActivitiesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LiveActivitiesAPI {

    /**
     Deregister a Live Activity
     
     - parameter liveActivityId: (path) Unique identifier for the Live Activity registration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLiveActivity(liveActivityId: UUID, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLiveActivityWithRequestBuilder(liveActivityId: liveActivityId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deregister a Live Activity
     - DELETE /live-activities/{liveActivityId}
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter liveActivityId: (path) Unique identifier for the Live Activity registration. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLiveActivityWithRequestBuilder(liveActivityId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/live-activities/{liveActivityId}"
        let liveActivityIdPreEscape = "\(APIHelper.mapValueToPathItem(liveActivityId))"
        let liveActivityIdPostEscape = liveActivityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{liveActivityId}", with: liveActivityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Register a Live Activity for a session
     
     - parameter liveActivityRegisterRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func registerLiveActivity(liveActivityRegisterRequest: LiveActivityRegisterRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LiveActivity?, _ error: Error?) -> Void)) -> RequestTask {
        return registerLiveActivityWithRequestBuilder(liveActivityRegisterRequest: liveActivityRegisterRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Register a Live Activity for a session
     - POST /live-activities
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter liveActivityRegisterRequest: (body)  
     - returns: RequestBuilder<LiveActivity> 
     */
    open class func registerLiveActivityWithRequestBuilder(liveActivityRegisterRequest: LiveActivityRegisterRequest) -> RequestBuilder<LiveActivity> {
        let localVariablePath = "/live-activities"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveActivityRegisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveActivity>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Live Activity lifecycle state
     
     - parameter liveActivityId: (path) Unique identifier for the Live Activity registration. 
     - parameter liveActivityUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateLiveActivity(liveActivityId: UUID, liveActivityUpdateRequest: LiveActivityUpdateRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LiveActivity?, _ error: Error?) -> Void)) -> RequestTask {
        return updateLiveActivityWithRequestBuilder(liveActivityId: liveActivityId, liveActivityUpdateRequest: liveActivityUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Live Activity lifecycle state
     - PATCH /live-activities/{liveActivityId}
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter liveActivityId: (path) Unique identifier for the Live Activity registration. 
     - parameter liveActivityUpdateRequest: (body)  
     - returns: RequestBuilder<LiveActivity> 
     */
    open class func updateLiveActivityWithRequestBuilder(liveActivityId: UUID, liveActivityUpdateRequest: LiveActivityUpdateRequest) -> RequestBuilder<LiveActivity> {
        var localVariablePath = "/live-activities/{liveActivityId}"
        let liveActivityIdPreEscape = "\(APIHelper.mapValueToPathItem(liveActivityId))"
        let liveActivityIdPostEscape = liveActivityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{liveActivityId}", with: liveActivityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveActivityUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveActivity>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
