//
// PrivacyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PrivacyAPI {

    /**
     Submit a user-initiated data deletion request
     
     - parameter dataDeletionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createDataDeletionRequest(dataDeletionRequest: DataDeletionRequest? = nil, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: DataDeletionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createDataDeletionRequestWithRequestBuilder(dataDeletionRequest: dataDeletionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit a user-initiated data deletion request
     - POST /users/me/data-deletion-requests
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter dataDeletionRequest: (body)  (optional)
     - returns: RequestBuilder<DataDeletionResponse> 
     */
    open class func createDataDeletionRequestWithRequestBuilder(dataDeletionRequest: DataDeletionRequest? = nil) -> RequestBuilder<DataDeletionResponse> {
        let localVariablePath = "/users/me/data-deletion-requests"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dataDeletionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataDeletionResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Submit a user-initiated data export request
     
     - parameter dataExportRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createDataExportRequest(dataExportRequest: DataExportRequest? = nil, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: DataExportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createDataExportRequestWithRequestBuilder(dataExportRequest: dataExportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit a user-initiated data export request
     - POST /users/me/data-export-requests
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter dataExportRequest: (body)  (optional)
     - returns: RequestBuilder<DataExportResponse> 
     */
    open class func createDataExportRequestWithRequestBuilder(dataExportRequest: DataExportRequest? = nil) -> RequestBuilder<DataExportResponse> {
        let localVariablePath = "/users/me/data-export-requests"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dataExportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataExportResponse>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
