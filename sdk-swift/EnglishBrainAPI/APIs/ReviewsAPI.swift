//
// ReviewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReviewsAPI {

    /**
     Create a personalized review plan
     
     - parameter reviewCreateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createReview(reviewCreateRequest: ReviewCreateRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ReviewPlan?, _ error: Error?) -> Void)) -> RequestTask {
        return createReviewWithRequestBuilder(reviewCreateRequest: reviewCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a personalized review plan
     - POST /reviews
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter reviewCreateRequest: (body)  
     - returns: RequestBuilder<ReviewPlan> 
     */
    open class func createReviewWithRequestBuilder(reviewCreateRequest: ReviewCreateRequest) -> RequestBuilder<ReviewPlan> {
        let localVariablePath = "/reviews"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reviewCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewPlan>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a review plan by identifier
     
     - parameter reviewId: (path) Unique identifier for the review plan. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReview(reviewId: UUID, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ReviewPlan?, _ error: Error?) -> Void)) -> RequestTask {
        return getReviewWithRequestBuilder(reviewId: reviewId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a review plan by identifier
     - GET /reviews/{reviewId}
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter reviewId: (path) Unique identifier for the review plan. 
     - returns: RequestBuilder<ReviewPlan> 
     */
    open class func getReviewWithRequestBuilder(reviewId: UUID) -> RequestBuilder<ReviewPlan> {
        var localVariablePath = "/reviews/{reviewId}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reviewId}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewPlan>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List active review plans
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listReviews(apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ListReviews200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listReviewsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List active review plans
     - GET /reviews
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - returns: RequestBuilder<ListReviews200Response> 
     */
    open class func listReviewsWithRequestBuilder() -> RequestBuilder<ListReviews200Response> {
        let localVariablePath = "/reviews"
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListReviews200Response>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update review progress and outcomes
     
     - parameter reviewId: (path) Unique identifier for the review plan. 
     - parameter reviewUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateReview(reviewId: UUID, reviewUpdateRequest: ReviewUpdateRequest, apiResponseQueue: DispatchQueue = EnglishBrainAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ReviewPlan?, _ error: Error?) -> Void)) -> RequestTask {
        return updateReviewWithRequestBuilder(reviewId: reviewId, reviewUpdateRequest: reviewUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update review progress and outcomes
     - PATCH /reviews/{reviewId}
     - Bearer Token:
       - type: http
       - name: FirebaseAuth
     - parameter reviewId: (path) Unique identifier for the review plan. 
     - parameter reviewUpdateRequest: (body)  
     - returns: RequestBuilder<ReviewPlan> 
     */
    open class func updateReviewWithRequestBuilder(reviewId: UUID, reviewUpdateRequest: ReviewUpdateRequest) -> RequestBuilder<ReviewPlan> {
        var localVariablePath = "/reviews/{reviewId}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reviewId}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = EnglishBrainAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reviewUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewPlan>.Type = EnglishBrainAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
