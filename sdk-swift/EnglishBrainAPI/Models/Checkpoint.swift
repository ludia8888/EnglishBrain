//
// Checkpoint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Checkpoint: Codable, JSONEncodable, Hashable {

    static let accuracyRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let brainTokensEarnedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var checkpointId: String
    public var phaseId: String
    public var reachedAt: Date
    public var accuracy: Double
    public var comboMax: Int
    public var hintsUsed: Int
    public var durationSeconds: Int
    public var brainTokensEarned: Int?
    public var freezeConsumed: Bool?
    public var sessionId: String

    public init(checkpointId: String, phaseId: String, reachedAt: Date, accuracy: Double, comboMax: Int, hintsUsed: Int, durationSeconds: Int, brainTokensEarned: Int? = nil, freezeConsumed: Bool? = nil, sessionId: String) {
        self.checkpointId = checkpointId
        self.phaseId = phaseId
        self.reachedAt = reachedAt
        self.accuracy = accuracy
        self.comboMax = comboMax
        self.hintsUsed = hintsUsed
        self.durationSeconds = durationSeconds
        self.brainTokensEarned = brainTokensEarned
        self.freezeConsumed = freezeConsumed
        self.sessionId = sessionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case checkpointId
        case phaseId
        case reachedAt
        case accuracy
        case comboMax
        case hintsUsed
        case durationSeconds
        case brainTokensEarned
        case freezeConsumed
        case sessionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(checkpointId, forKey: .checkpointId)
        try container.encode(phaseId, forKey: .phaseId)
        try container.encode(reachedAt, forKey: .reachedAt)
        try container.encode(accuracy, forKey: .accuracy)
        try container.encode(comboMax, forKey: .comboMax)
        try container.encode(hintsUsed, forKey: .hintsUsed)
        try container.encode(durationSeconds, forKey: .durationSeconds)
        try container.encodeIfPresent(brainTokensEarned, forKey: .brainTokensEarned)
        try container.encodeIfPresent(freezeConsumed, forKey: .freezeConsumed)
        try container.encode(sessionId, forKey: .sessionId)
    }
}

