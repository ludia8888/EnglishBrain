//
// SessionItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionItem: Codable, JSONEncodable, Hashable {

    public enum DifficultyBand: String, Codable, CaseIterable {
        case intro = "intro"
        case core = "core"
        case challenge = "challenge"
    }
    public var itemId: String
    public var prompt: ItemPrompt
    public var frame: ItemFrame
    public var tokens: [FrameToken]
    public var distractors: [FrameToken]?
    public var correctSequence: [String]
    public var patternTags: [String]
    public var difficultyBand: DifficultyBand
    public var hints: [Hint]?
    public var scoring: ScoringRules?

    public init(itemId: String, prompt: ItemPrompt, frame: ItemFrame, tokens: [FrameToken], distractors: [FrameToken]? = nil, correctSequence: [String], patternTags: [String], difficultyBand: DifficultyBand, hints: [Hint]? = nil, scoring: ScoringRules? = nil) {
        self.itemId = itemId
        self.prompt = prompt
        self.frame = frame
        self.tokens = tokens
        self.distractors = distractors
        self.correctSequence = correctSequence
        self.patternTags = patternTags
        self.difficultyBand = difficultyBand
        self.hints = hints
        self.scoring = scoring
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId
        case prompt
        case frame
        case tokens
        case distractors
        case correctSequence
        case patternTags
        case difficultyBand
        case hints
        case scoring
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(prompt, forKey: .prompt)
        try container.encode(frame, forKey: .frame)
        try container.encode(tokens, forKey: .tokens)
        try container.encodeIfPresent(distractors, forKey: .distractors)
        try container.encode(correctSequence, forKey: .correctSequence)
        try container.encode(patternTags, forKey: .patternTags)
        try container.encode(difficultyBand, forKey: .difficultyBand)
        try container.encodeIfPresent(hints, forKey: .hints)
        try container.encodeIfPresent(scoring, forKey: .scoring)
    }
}

