//
// SessionPhase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionPhase: Codable, JSONEncodable, Hashable {

    public enum PhaseType: String, Codable, CaseIterable {
        case warmUp = "warm-up"
        case focus = "focus"
        case coolDown = "cool-down"
        case review = "review"
        case challenge = "challenge"
    }
    static let hintBudgetRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var phaseId: String
    public var label: String
    public var phaseType: PhaseType
    public var order: Int
    public var targetSentences: Int
    public var targetDurationSeconds: Int
    public var itemIds: [String]
    public var comboRules: SessionPhaseComboRules
    public var checkpointStatus: CheckpointStatus?
    /** Maximum hints allocated for this phase. */
    public var hintBudget: Int?

    public init(phaseId: String, label: String, phaseType: PhaseType, order: Int, targetSentences: Int, targetDurationSeconds: Int, itemIds: [String], comboRules: SessionPhaseComboRules, checkpointStatus: CheckpointStatus? = nil, hintBudget: Int? = nil) {
        self.phaseId = phaseId
        self.label = label
        self.phaseType = phaseType
        self.order = order
        self.targetSentences = targetSentences
        self.targetDurationSeconds = targetDurationSeconds
        self.itemIds = itemIds
        self.comboRules = comboRules
        self.checkpointStatus = checkpointStatus
        self.hintBudget = hintBudget
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case phaseId
        case label
        case phaseType
        case order
        case targetSentences
        case targetDurationSeconds
        case itemIds
        case comboRules
        case checkpointStatus
        case hintBudget
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(phaseId, forKey: .phaseId)
        try container.encode(label, forKey: .label)
        try container.encode(phaseType, forKey: .phaseType)
        try container.encode(order, forKey: .order)
        try container.encode(targetSentences, forKey: .targetSentences)
        try container.encode(targetDurationSeconds, forKey: .targetDurationSeconds)
        try container.encode(itemIds, forKey: .itemIds)
        try container.encode(comboRules, forKey: .comboRules)
        try container.encodeIfPresent(checkpointStatus, forKey: .checkpointStatus)
        try container.encodeIfPresent(hintBudget, forKey: .hintBudget)
    }
}

