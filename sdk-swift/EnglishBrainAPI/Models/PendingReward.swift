//
// PendingReward.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PendingReward: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case streak = "streak"
        case brainToken = "brain-token"
        case streakFreeze = "streak-freeze"
        case bonus = "bonus"
    }
    public enum Status: String, Codable, CaseIterable {
        case queued = "queued"
        case granted = "granted"
    }
    public var rewardId: String
    public var type: ModelType
    public var status: Status
    public var serverClockSnapshot: Date?

    public init(rewardId: String, type: ModelType, status: Status, serverClockSnapshot: Date? = nil) {
        self.rewardId = rewardId
        self.type = type
        self.status = status
        self.serverClockSnapshot = serverClockSnapshot
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rewardId
        case type
        case status
        case serverClockSnapshot
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(rewardId, forKey: .rewardId)
        try container.encode(type, forKey: .type)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(serverClockSnapshot, forKey: .serverClockSnapshot)
    }
}

