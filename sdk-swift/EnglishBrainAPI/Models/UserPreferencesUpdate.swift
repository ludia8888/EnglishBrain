//
// UserPreferencesUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserPreferencesUpdate: Codable, JSONEncodable, Hashable {

    public enum EffectMode: String, Codable, CaseIterable {
        case full = "full"
        case reduced = "reduced"
        case minimal = "minimal"
    }
    static let dailyGoalSentencesRule = NumericRule<Int>(minimum: 6, exclusiveMinimum: false, maximum: 24, exclusiveMaximum: false, multipleOf: nil)
    static let dailyGoalMinutesRule = NumericRule<Int>(minimum: 5, exclusiveMinimum: false, maximum: 30, exclusiveMaximum: false, multipleOf: nil)
    public var hapticsEnabled: Bool?
    public var soundEnabled: Bool?
    public var pushOptIn: Bool?
    public var effectMode: EffectMode?
    public var dailyGoalSentences: Int?
    public var dailyGoalMinutes: Int?

    public init(hapticsEnabled: Bool? = nil, soundEnabled: Bool? = nil, pushOptIn: Bool? = nil, effectMode: EffectMode? = nil, dailyGoalSentences: Int? = nil, dailyGoalMinutes: Int? = nil) {
        self.hapticsEnabled = hapticsEnabled
        self.soundEnabled = soundEnabled
        self.pushOptIn = pushOptIn
        self.effectMode = effectMode
        self.dailyGoalSentences = dailyGoalSentences
        self.dailyGoalMinutes = dailyGoalMinutes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hapticsEnabled
        case soundEnabled
        case pushOptIn
        case effectMode
        case dailyGoalSentences
        case dailyGoalMinutes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hapticsEnabled, forKey: .hapticsEnabled)
        try container.encodeIfPresent(soundEnabled, forKey: .soundEnabled)
        try container.encodeIfPresent(pushOptIn, forKey: .pushOptIn)
        try container.encodeIfPresent(effectMode, forKey: .effectMode)
        try container.encodeIfPresent(dailyGoalSentences, forKey: .dailyGoalSentences)
        try container.encodeIfPresent(dailyGoalMinutes, forKey: .dailyGoalMinutes)
    }
}

