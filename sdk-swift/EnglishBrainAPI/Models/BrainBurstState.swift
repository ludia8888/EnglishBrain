//
// BrainBurstState.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BrainBurstState: Codable, JSONEncodable, Hashable {

    static let sessionsUntilActivationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var active: Bool
    /** Bonus multiplier applied when Brain Burst is active. */
    public var multiplier: Double
    public var eligibleAt: Date?
    /** Remaining completed sessions before next activation. */
    public var sessionsUntilActivation: Int?

    public init(active: Bool, multiplier: Double, eligibleAt: Date? = nil, sessionsUntilActivation: Int? = nil) {
        self.active = active
        self.multiplier = multiplier
        self.eligibleAt = eligibleAt
        self.sessionsUntilActivation = sessionsUntilActivation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case multiplier
        case eligibleAt
        case sessionsUntilActivation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(active, forKey: .active)
        try container.encode(multiplier, forKey: .multiplier)
        try container.encodeIfPresent(eligibleAt, forKey: .eligibleAt)
        try container.encodeIfPresent(sessionsUntilActivation, forKey: .sessionsUntilActivation)
    }
}

