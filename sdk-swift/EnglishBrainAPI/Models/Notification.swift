//
// Notification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Notification: Codable, JSONEncodable, Hashable {

    public enum Category: String, Codable, CaseIterable {
        case streak = "streak"
        case pattern = "pattern"
        case reminder = "reminder"
        case promo = "promo"
    }
    public enum Status: String, Codable, CaseIterable {
        case scheduled = "scheduled"
        case sent = "sent"
        case opened = "opened"
        case ignored = "ignored"
    }
    public var notificationId: UUID
    public var category: Category
    public var title: String
    public var body: String
    public var deliveryAt: Date
    public var deeplink: String
    public var status: Status
    public var templateId: String?
    public var context: [String: String]?

    public init(notificationId: UUID, category: Category, title: String, body: String, deliveryAt: Date, deeplink: String, status: Status, templateId: String? = nil, context: [String: String]? = nil) {
        self.notificationId = notificationId
        self.category = category
        self.title = title
        self.body = body
        self.deliveryAt = deliveryAt
        self.deeplink = deeplink
        self.status = status
        self.templateId = templateId
        self.context = context
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case notificationId
        case category
        case title
        case body
        case deliveryAt
        case deeplink
        case status
        case templateId
        case context
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(notificationId, forKey: .notificationId)
        try container.encode(category, forKey: .category)
        try container.encode(title, forKey: .title)
        try container.encode(body, forKey: .body)
        try container.encode(deliveryAt, forKey: .deliveryAt)
        try container.encode(deeplink, forKey: .deeplink)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(context, forKey: .context)
    }
}

