//
// LevelTestResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LevelTestResult: Codable, JSONEncodable, Hashable {

    static let recommendedLevelRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    static let confidenceRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    public var recommendedLevel: Int
    public var confidence: Double
    public var rationale: String
    public var nextLessonId: String
    public var unlocksReview: Bool? = false
    /** True when early session performance will be combined before finalizing the level. */
    public var needsSessionCalibration: Bool? = true

    public init(recommendedLevel: Int, confidence: Double, rationale: String, nextLessonId: String, unlocksReview: Bool? = false, needsSessionCalibration: Bool? = true) {
        self.recommendedLevel = recommendedLevel
        self.confidence = confidence
        self.rationale = rationale
        self.nextLessonId = nextLessonId
        self.unlocksReview = unlocksReview
        self.needsSessionCalibration = needsSessionCalibration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recommendedLevel
        case confidence
        case rationale
        case nextLessonId
        case unlocksReview
        case needsSessionCalibration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recommendedLevel, forKey: .recommendedLevel)
        try container.encode(confidence, forKey: .confidence)
        try container.encode(rationale, forKey: .rationale)
        try container.encode(nextLessonId, forKey: .nextLessonId)
        try container.encodeIfPresent(unlocksReview, forKey: .unlocksReview)
        try container.encodeIfPresent(needsSessionCalibration, forKey: .needsSessionCalibration)
    }
}

