//
// TelemetryEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TelemetryEvent: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case sessionStart = "session_start"
        case sessionComplete = "session_complete"
        case itemResult = "item_result"
        case checkpointReached = "checkpoint_reached"
        case hintUsed = "hint_used"
        case notificationSent = "notification_sent"
        case notificationOpened = "notification_opened"
        case reviewStarted = "review_started"
        case reviewCompleted = "review_completed"
        case liveActivityStarted = "live_activity_started"
        case liveActivityEnded = "live_activity_ended"
        case deepAction = "deep_action"
    }
    public var eventId: UUID
    public var type: ModelType
    public var occurredAt: Date
    public var sessionId: String?
    public var reviewId: String?
    public var liveActivityId: String?
    public var attributes: AnyCodable

    public init(eventId: UUID, type: ModelType, occurredAt: Date, sessionId: String? = nil, reviewId: String? = nil, liveActivityId: String? = nil, attributes: AnyCodable) {
        self.eventId = eventId
        self.type = type
        self.occurredAt = occurredAt
        self.sessionId = sessionId
        self.reviewId = reviewId
        self.liveActivityId = liveActivityId
        self.attributes = attributes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId
        case type
        case occurredAt
        case sessionId
        case reviewId
        case liveActivityId
        case attributes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(occurredAt, forKey: .occurredAt)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(reviewId, forKey: .reviewId)
        try container.encodeIfPresent(liveActivityId, forKey: .liveActivityId)
        try container.encode(attributes, forKey: .attributes)
    }
}

