//
// PatternImpact.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatternImpact: Codable, JSONEncodable, Hashable {

    public var patternId: String
    public var deltaConquestRate: Double
    public var exposures: Int
    public var severityBefore: Int?
    public var severityAfter: Int?
    public var hintRateBefore: Double?
    public var hintRateAfter: Double?

    public init(patternId: String, deltaConquestRate: Double, exposures: Int, severityBefore: Int? = nil, severityAfter: Int? = nil, hintRateBefore: Double? = nil, hintRateAfter: Double? = nil) {
        self.patternId = patternId
        self.deltaConquestRate = deltaConquestRate
        self.exposures = exposures
        self.severityBefore = severityBefore
        self.severityAfter = severityAfter
        self.hintRateBefore = hintRateBefore
        self.hintRateAfter = hintRateAfter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case patternId
        case deltaConquestRate
        case exposures
        case severityBefore
        case severityAfter
        case hintRateBefore
        case hintRateAfter
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(patternId, forKey: .patternId)
        try container.encode(deltaConquestRate, forKey: .deltaConquestRate)
        try container.encode(exposures, forKey: .exposures)
        try container.encodeIfPresent(severityBefore, forKey: .severityBefore)
        try container.encodeIfPresent(severityAfter, forKey: .severityAfter)
        try container.encodeIfPresent(hintRateBefore, forKey: .hintRateBefore)
        try container.encodeIfPresent(hintRateAfter, forKey: .hintRateAfter)
    }
}

