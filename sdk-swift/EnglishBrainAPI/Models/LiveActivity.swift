//
// LiveActivity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LiveActivity: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case preparing = "preparing"
        case active = "active"
        case ended = "ended"
        case expired = "expired"
    }
    public var liveActivityId: UUID
    public var sessionId: UUID
    public var status: Status
    /** Encrypted token provided by ActivityKit for push updates. */
    public var activityToken: String
    public var pushTokenExpiresAt: Date?
    public var createdAt: Date
    public var updatedAt: Date

    public init(liveActivityId: UUID, sessionId: UUID, status: Status, activityToken: String, pushTokenExpiresAt: Date? = nil, createdAt: Date, updatedAt: Date) {
        self.liveActivityId = liveActivityId
        self.sessionId = sessionId
        self.status = status
        self.activityToken = activityToken
        self.pushTokenExpiresAt = pushTokenExpiresAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case liveActivityId
        case sessionId
        case status
        case activityToken
        case pushTokenExpiresAt
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(liveActivityId, forKey: .liveActivityId)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encode(status, forKey: .status)
        try container.encode(activityToken, forKey: .activityToken)
        try container.encodeIfPresent(pushTokenExpiresAt, forKey: .pushTokenExpiresAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

