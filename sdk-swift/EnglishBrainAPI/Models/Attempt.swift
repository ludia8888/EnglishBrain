//
// Attempt.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Attempt: Codable, JSONEncodable, Hashable {

    public enum Verdict: String, Codable, CaseIterable {
        case correct = "correct"
        case incorrect = "incorrect"
        case corrected = "corrected"
    }
    static let timeSpentMsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let hintsUsedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let comboCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let retryNumberRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var attemptId: String
    public var itemId: String
    public var startedAt: Date
    public var completedAt: Date
    public var placements: [Placement]
    public var verdict: Verdict
    public var timeSpentMs: Int
    public var hintsUsed: Int
    public var comboCount: Int
    public var errors: [AttemptError]?
    public var retryNumber: Int?
    /** Indicates whether the first placement sequence was correct without retries. */
    public var firstTryCorrect: Bool?
    public var sessionId: String

    public init(attemptId: String, itemId: String, startedAt: Date, completedAt: Date, placements: [Placement], verdict: Verdict, timeSpentMs: Int, hintsUsed: Int, comboCount: Int, errors: [AttemptError]? = nil, retryNumber: Int? = nil, firstTryCorrect: Bool? = nil, sessionId: String) {
        self.attemptId = attemptId
        self.itemId = itemId
        self.startedAt = startedAt
        self.completedAt = completedAt
        self.placements = placements
        self.verdict = verdict
        self.timeSpentMs = timeSpentMs
        self.hintsUsed = hintsUsed
        self.comboCount = comboCount
        self.errors = errors
        self.retryNumber = retryNumber
        self.firstTryCorrect = firstTryCorrect
        self.sessionId = sessionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attemptId
        case itemId
        case startedAt
        case completedAt
        case placements
        case verdict
        case timeSpentMs
        case hintsUsed
        case comboCount
        case errors
        case retryNumber
        case firstTryCorrect
        case sessionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(attemptId, forKey: .attemptId)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(startedAt, forKey: .startedAt)
        try container.encode(completedAt, forKey: .completedAt)
        try container.encode(placements, forKey: .placements)
        try container.encode(verdict, forKey: .verdict)
        try container.encode(timeSpentMs, forKey: .timeSpentMs)
        try container.encode(hintsUsed, forKey: .hintsUsed)
        try container.encode(comboCount, forKey: .comboCount)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(retryNumber, forKey: .retryNumber)
        try container.encodeIfPresent(firstTryCorrect, forKey: .firstTryCorrect)
        try container.encode(sessionId, forKey: .sessionId)
    }
}

