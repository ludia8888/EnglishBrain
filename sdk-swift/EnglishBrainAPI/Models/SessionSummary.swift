//
// SessionSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionSummary: Codable, JSONEncodable, Hashable {

    static let accuracyRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let hintRateRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let firstTryRateRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    public var accuracy: Double
    public var totalItems: Int
    public var correct: Int
    public var incorrect: Int
    public var hintsUsed: Int
    public var comboMax: Int
    public var brainTokensEarned: Int
    public var durationSeconds: Int
    public var patternImpact: [PatternImpact]
    public var hintRate: Double?
    public var firstTryRate: Double?
    public var completedAt: Date?
    /** Indicates whether Brain Burst multiplier was applied to this session summary. */
    public var brainBurstApplied: Bool?
    /** Multiplier applied during active Brain Burst (e.g., 2.0). */
    public var brainBurstMultiplier: Double?
    /** Next eligibility timestamp for Brain Burst activation. */
    public var brainBurstEligibleAt: Date?

    public init(accuracy: Double, totalItems: Int, correct: Int, incorrect: Int, hintsUsed: Int, comboMax: Int, brainTokensEarned: Int, durationSeconds: Int, patternImpact: [PatternImpact], hintRate: Double? = nil, firstTryRate: Double? = nil, completedAt: Date? = nil, brainBurstApplied: Bool? = nil, brainBurstMultiplier: Double? = nil, brainBurstEligibleAt: Date? = nil) {
        self.accuracy = accuracy
        self.totalItems = totalItems
        self.correct = correct
        self.incorrect = incorrect
        self.hintsUsed = hintsUsed
        self.comboMax = comboMax
        self.brainTokensEarned = brainTokensEarned
        self.durationSeconds = durationSeconds
        self.patternImpact = patternImpact
        self.hintRate = hintRate
        self.firstTryRate = firstTryRate
        self.completedAt = completedAt
        self.brainBurstApplied = brainBurstApplied
        self.brainBurstMultiplier = brainBurstMultiplier
        self.brainBurstEligibleAt = brainBurstEligibleAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accuracy
        case totalItems
        case correct
        case incorrect
        case hintsUsed
        case comboMax
        case brainTokensEarned
        case durationSeconds
        case patternImpact
        case hintRate
        case firstTryRate
        case completedAt
        case brainBurstApplied
        case brainBurstMultiplier
        case brainBurstEligibleAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accuracy, forKey: .accuracy)
        try container.encode(totalItems, forKey: .totalItems)
        try container.encode(correct, forKey: .correct)
        try container.encode(incorrect, forKey: .incorrect)
        try container.encode(hintsUsed, forKey: .hintsUsed)
        try container.encode(comboMax, forKey: .comboMax)
        try container.encode(brainTokensEarned, forKey: .brainTokensEarned)
        try container.encode(durationSeconds, forKey: .durationSeconds)
        try container.encode(patternImpact, forKey: .patternImpact)
        try container.encodeIfPresent(hintRate, forKey: .hintRate)
        try container.encodeIfPresent(firstTryRate, forKey: .firstTryRate)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(brainBurstApplied, forKey: .brainBurstApplied)
        try container.encodeIfPresent(brainBurstMultiplier, forKey: .brainBurstMultiplier)
        try container.encodeIfPresent(brainBurstEligibleAt, forKey: .brainBurstEligibleAt)
    }
}

