//
// UserStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserStats: Codable, JSONEncodable, Hashable {

    public enum SubscriptionStatus: String, Codable, CaseIterable {
        case free = "free"
        case trial = "trial"
        case premium = "premium"
    }
    static let currentStreakRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let longestStreakRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let brainTokensRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let streakFreezesAvailableRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let patternConquestCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sessionsCompletedThisWeekRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var currentStreak: Int
    public var longestStreak: Int
    public var brainTokens: Int
    public var streakFreezesAvailable: Int
    public var patternConquestCount: Int
    public var sessionsCompletedThisWeek: Int
    public var lastSessionAt: Date
    public var subscriptionStatus: SubscriptionStatus

    public init(currentStreak: Int, longestStreak: Int, brainTokens: Int, streakFreezesAvailable: Int, patternConquestCount: Int, sessionsCompletedThisWeek: Int, lastSessionAt: Date, subscriptionStatus: SubscriptionStatus) {
        self.currentStreak = currentStreak
        self.longestStreak = longestStreak
        self.brainTokens = brainTokens
        self.streakFreezesAvailable = streakFreezesAvailable
        self.patternConquestCount = patternConquestCount
        self.sessionsCompletedThisWeek = sessionsCompletedThisWeek
        self.lastSessionAt = lastSessionAt
        self.subscriptionStatus = subscriptionStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentStreak
        case longestStreak
        case brainTokens
        case streakFreezesAvailable
        case patternConquestCount
        case sessionsCompletedThisWeek
        case lastSessionAt
        case subscriptionStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(currentStreak, forKey: .currentStreak)
        try container.encode(longestStreak, forKey: .longestStreak)
        try container.encode(brainTokens, forKey: .brainTokens)
        try container.encode(streakFreezesAvailable, forKey: .streakFreezesAvailable)
        try container.encode(patternConquestCount, forKey: .patternConquestCount)
        try container.encode(sessionsCompletedThisWeek, forKey: .sessionsCompletedThisWeek)
        try container.encode(lastSessionAt, forKey: .lastSessionAt)
        try container.encode(subscriptionStatus, forKey: .subscriptionStatus)
    }
}

