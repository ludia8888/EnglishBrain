//
// PatternCard.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatternCard: Codable, JSONEncodable, Hashable {

    public enum Trend: String, Codable, CaseIterable {
        case improving = "improving"
        case stable = "stable"
        case declining = "declining"
    }
    static let conquestRateRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let severityRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    static let hintRateRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let firstTryRateRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    public var patternId: String
    public var label: String
    public var conquestRate: Double
    public var trend: Trend
    public var severity: Int
    public var recommendedAction: HomeAction
    /** Ratio of attempts using hints within the pattern window. */
    public var hintRate: Double?
    /** Share of items solved correctly on the first attempt. */
    public var firstTryRate: Double?

    public init(patternId: String, label: String, conquestRate: Double, trend: Trend, severity: Int, recommendedAction: HomeAction, hintRate: Double? = nil, firstTryRate: Double? = nil) {
        self.patternId = patternId
        self.label = label
        self.conquestRate = conquestRate
        self.trend = trend
        self.severity = severity
        self.recommendedAction = recommendedAction
        self.hintRate = hintRate
        self.firstTryRate = firstTryRate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case patternId
        case label
        case conquestRate
        case trend
        case severity
        case recommendedAction
        case hintRate
        case firstTryRate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(patternId, forKey: .patternId)
        try container.encode(label, forKey: .label)
        try container.encode(conquestRate, forKey: .conquestRate)
        try container.encode(trend, forKey: .trend)
        try container.encode(severity, forKey: .severity)
        try container.encode(recommendedAction, forKey: .recommendedAction)
        try container.encodeIfPresent(hintRate, forKey: .hintRate)
        try container.encodeIfPresent(firstTryRate, forKey: .firstTryRate)
    }
}

