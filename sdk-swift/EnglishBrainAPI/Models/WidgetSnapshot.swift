//
// WidgetSnapshot.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WidgetSnapshot: Codable, JSONEncodable, Hashable {

    public enum DailyGoalTier: String, Codable, CaseIterable {
        case basic = "basic"
        case intensive = "intensive"
    }
    static let sentencesRemainingRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let currentStreakRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let brainTokensRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let nextBrainTokenInDaysRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var updatedAt: Date
    public var sentencesRemaining: Int
    public var dailyGoalTier: DailyGoalTier
    public var currentStreak: Int
    public var brainTokens: Int
    public var nextBrainTokenInDays: Int?
    public var deeplink: String

    public init(updatedAt: Date, sentencesRemaining: Int, dailyGoalTier: DailyGoalTier, currentStreak: Int, brainTokens: Int, nextBrainTokenInDays: Int? = nil, deeplink: String) {
        self.updatedAt = updatedAt
        self.sentencesRemaining = sentencesRemaining
        self.dailyGoalTier = dailyGoalTier
        self.currentStreak = currentStreak
        self.brainTokens = brainTokens
        self.nextBrainTokenInDays = nextBrainTokenInDays
        self.deeplink = deeplink
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case updatedAt
        case sentencesRemaining
        case dailyGoalTier
        case currentStreak
        case brainTokens
        case nextBrainTokenInDays
        case deeplink
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(sentencesRemaining, forKey: .sentencesRemaining)
        try container.encode(dailyGoalTier, forKey: .dailyGoalTier)
        try container.encode(currentStreak, forKey: .currentStreak)
        try container.encode(brainTokens, forKey: .brainTokens)
        try container.encodeIfPresent(nextBrainTokenInDays, forKey: .nextBrainTokenInDays)
        try container.encode(deeplink, forKey: .deeplink)
    }
}

